{"version":3,"sources":["webpack:///component---src-pages-reactnative-intro-reactnative-login-jsx-648a0a25b1542a1131c6.js","webpack:///./src/pages/reactnative-intro/reactnative-login.jsx"],"names":["webpackJsonp","./node_modules/babel-loader/lib/index.js?{\"plugins\":[\"/Users/prakash/Documents/reactjs/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\",\"/Users/prakash/Documents/reactjs/node_modules/babel-plugin-lodash/lib/index.js\",\"/Users/prakash/Documents/reactjs/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"/Users/prakash/Documents/reactjs/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"presets\":[[\"/Users/prakash/Documents/reactjs/node_modules/babel-preset-env/lib/index.js\",{\"loose\":true,\"uglify\":true,\"modules\":\"commonjs\",\"targets\":{\"browsers\":[\"> 1%\",\"last 2 versions\",\"IE >= 9\"]},\"exclude\":[\"transform-regenerator\",\"transform-es2015-typeof-symbol\"]}],\"/Users/prakash/Documents/reactjs/node_modules/babel-preset-stage-0/lib/index.js\",\"/Users/prakash/Documents/reactjs/node_modules/babel-preset-react/lib/index.js\"],\"cacheDirectory\":true}!./src/pages/reactnative-intro/reactnative-login.jsx","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_MainLayout","_MainLayout2","_CtaButton","_CtaButton2","_Block","_Block2","inputboxes","loginfunction","loginquery","props","createElement","value","href","to"],"mappings":"AAAAA,cAAc,oBAERC,s6BACA,SAAUC,EAAQC,EAASC,GAEhC,YAoBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAlBvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,iCDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,mCDcKQ,EAAeP,EAAuBM,GCb3CE,EAAAT,EAAA,kCDiBKU,EAAcT,EAAuBQ,GChB1CE,EAAAX,EAAA,8BDoBKY,EAAUX,EAAuBU,GClBhCE,ysBAwBAC,qoBAyBAC,0QDrBLhB,GAAQK,QCoCM,SAAAY,GAAA,MACbV,GAAAF,QAAAa,cAAAT,EAAAJ,QAAA,KACEE,EAAAF,QAAAa,cAAA,gCACAX,EAAAF,QAAAa,cAAA,kIAKAX,EAAAF,QAAAa,cAAA,kCACAX,EAAAF,QAAAa,cAAA,0LAKAX,EAAAF,QAAAa,cAAAL,EAAAR,SAAOc,MAAOL,IAEdP,EAAAF,QAAAa,cAAA,wCACAX,EAAAF,QAAAa,cAAA,2GAIAX,EAAAF,QAAAa,cAAA,uHAGEX,EAAAF,QAAAa,cAAA,KAAGE,KAAK,iDACNb,EAAAF,QAAAa,cAAA,4BAJJ,qEAQAX,EAAAF,QAAAa,cAAAL,EAAAR,SAAOc,MAAOH,IAEdT,EAAAF,QAAAa,cAAA,sKAKAX,EAAAF,QAAAa,cAAAL,EAAAR,SAAOc,MAAOJ,IAEdR,EAAAF,QAAAa,cAAA,+BACAX,EAAAF,QAAAa,cAAA,yLAMAX,EAAAF,QAAAa,cAAAP,EAAAN,SAAWgB,GAAG,uBAAd,YACAd,EAAAF,QAAAa,cAAAP,EAAAN,SAAWgB,GAAG,yCAAd,UDFHtB,EAAOC,QAAUA,EAAiB","file":"component---src-pages-reactnative-intro-reactnative-login-jsx-648a0a25b1542a1131c6.js","sourcesContent":["webpackJsonp([3376653081180650000],{\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"plugins\\\":[\\\"/Users/prakash/Documents/reactjs/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\\\",\\\"/Users/prakash/Documents/reactjs/node_modules/babel-plugin-lodash/lib/index.js\\\",\\\"/Users/prakash/Documents/reactjs/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"/Users/prakash/Documents/reactjs/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"presets\\\":[[\\\"/Users/prakash/Documents/reactjs/node_modules/babel-preset-env/lib/index.js\\\",{\\\"loose\\\":true,\\\"uglify\\\":true,\\\"modules\\\":\\\"commonjs\\\",\\\"targets\\\":{\\\"browsers\\\":[\\\"> 1%\\\",\\\"last 2 versions\\\",\\\"IE >= 9\\\"]},\\\"exclude\\\":[\\\"transform-regenerator\\\",\\\"transform-es2015-typeof-symbol\\\"]}],\\\"/Users/prakash/Documents/reactjs/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"/Users/prakash/Documents/reactjs/node_modules/babel-preset-react/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./src/pages/reactnative-intro/reactnative-login.jsx\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(\"./node_modules/react/react.js\");\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _MainLayout = __webpack_require__(\"./src/components/MainLayout.jsx\");\n\t\n\tvar _MainLayout2 = _interopRequireDefault(_MainLayout);\n\t\n\tvar _CtaButton = __webpack_require__(\"./src/components/CtaButton.jsx\");\n\t\n\tvar _CtaButton2 = _interopRequireDefault(_CtaButton);\n\t\n\tvar _Block = __webpack_require__(\"./src/components/Block.jsx\");\n\t\n\tvar _Block2 = _interopRequireDefault(_Block);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar inputboxes = \"\\nimport React, { Component } from \\\"react\\\";\\nimport { View, TextInput, Button } from \\\"react-native\\\";\\nclass LoginScreen extends Component{\\n    state = {\\n        phone: \\\"\\\",\\n        password: \\\"\\\",\\n        message:\\\"\\\"\\n    };\\n\\n    login=()=>{\\n    }\\n\\n    render(){\\n        return <View>\\n                <TextInputplaceholder=\\\"Phone\\\" style={styles.input} onChangeText={e => this.setState({ phone: e })}/>\\n                <TextInputplaceholder=\\\"Password\\\" style={styles.input} onChangeText={e => this.setState({ password: e })}/>\\n                <Text style={styles.messagetext}>{this.state.message}</Text>\\n                <Button onPress={this.login}>Login</Button>\\n                </View>\\n    }\\n}\\n\";\n\t\n\tvar loginfunction = \"\\nlogin=()=>{\\n    const {phone,password} = this.state;\\n    this.props\\n      .mutate({\\n        variables: {\\n          phone: phone.trim(),\\n          password: password.trim()\\n        }\\n      })\\n      .then(resp => {\\n        if (resp.data.AuthenticateUser.result) {\\n          const id = resp.data.AuthenticateUser.result.id;\\n          AsyncStorage.setItem(\\\"userid\\\", id);\\n          this.setState({message: \\\"Loggedin successfully\\\" });\\n        } else {\\n          this.setState({message: \\\"Invalid credentials\\\" });\\n        }\\n      })\\n      .catch(() => {\\n        this.setState({message: \\\"Invalid credentials\\\" });\\n      });\\n}\\n\";\n\t\n\tvar loginquery = \"\\nconst LoginQuery = gql'\\n  mutation AuthenticateUser(\\n    $phone: String!\\n    $password: String!\\n  ) {\\n    AuthenticateUser(phone: $phone, password: $password) {\\n      result\\n      error\\n    }\\n  }\\n';\\nexport default graphql(LoginQuery)(LoginScreen);\\n\";\n\t\n\texports.default = function (props) {\n\t  return _react2.default.createElement(\n\t    _MainLayout2.default,\n\t    null,\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"React Native Login\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"User login and authentication is a primary functionality. Let's see how to create a Login Page and authenticate user.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"1. Creat a component\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"To create a login page we need an input components like Input boxes to enter username and password and Button component to submit values and invoke authentication functions.\"\n\t    ),\n\t    _react2.default.createElement(_Block2.default, { value: inputboxes }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"2. Define a login function\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Here i am gonna use this.mutate() method to pass arguments to a query and authenticate a user.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"To use this method we should wrap our component inside database connectivity components.Here i am using the\",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://github.com/apollographql/react-apollo\" },\n\t        _react2.default.createElement(\n\t          \"b\",\n\t          null,\n\t          \" react-apollo \"\n\t        )\n\t      ),\n\t      \"package to establish a database connection and a query execution.\"\n\t    ),\n\t    _react2.default.createElement(_Block2.default, { value: loginquery }),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"This is nothing but getting values from input boxes and do some validations.After validation success hit the database to authenticate user login details.\"\n\t    ),\n\t    _react2.default.createElement(_Block2.default, { value: loginfunction }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"3. Display result\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Now we have to enter a phone number and password to login.The Authenticaiton result will be displayed in message text and then we need to navigate if the result is success.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      _CtaButton2.default,\n\t      { to: \"/reactnative-intro/\" },\n\t      \"Previous\"\n\t    ),\n\t    _react2.default.createElement(\n\t      _CtaButton2.default,\n\t      { to: \"/reactnative-intro/reactnative-signup\" },\n\t      \"Next\"\n\t    )\n\t  );\n\t};\n\t\n\tmodule.exports = exports[\"default\"];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-reactnative-intro-reactnative-login-jsx-648a0a25b1542a1131c6.js","import React from \"react\";\nimport MainLayout from \"../../components/MainLayout\";\nimport CtaButton from \"../../components/CtaButton\";\nimport Block from \"../../components/Block\";\n\nconst inputboxes = `\nimport React, { Component } from \"react\";\nimport { View, TextInput, Button } from \"react-native\";\nclass LoginScreen extends Component{\n    state = {\n        phone: \"\",\n        password: \"\",\n        message:\"\"\n    };\n\n    login=()=>{\n    }\n\n    render(){\n        return <View>\n                <TextInputplaceholder=\"Phone\" style={styles.input} onChangeText={e => this.setState({ phone: e })}/>\n                <TextInputplaceholder=\"Password\" style={styles.input} onChangeText={e => this.setState({ password: e })}/>\n                <Text style={styles.messagetext}>{this.state.message}</Text>\n                <Button onPress={this.login}>Login</Button>\n                </View>\n    }\n}\n`;\n\nconst loginfunction = `\nlogin=()=>{\n    const {phone,password} = this.state;\n    this.props\n      .mutate({\n        variables: {\n          phone: phone.trim(),\n          password: password.trim()\n        }\n      })\n      .then(resp => {\n        if (resp.data.AuthenticateUser.result) {\n          const id = resp.data.AuthenticateUser.result.id;\n          AsyncStorage.setItem(\"userid\", id);\n          this.setState({message: \"Loggedin successfully\" });\n        } else {\n          this.setState({message: \"Invalid credentials\" });\n        }\n      })\n      .catch(() => {\n        this.setState({message: \"Invalid credentials\" });\n      });\n}\n`;\n\nconst loginquery = `\nconst LoginQuery = gql'\n  mutation AuthenticateUser(\n    $phone: String!\n    $password: String!\n  ) {\n    AuthenticateUser(phone: $phone, password: $password) {\n      result\n      error\n    }\n  }\n';\nexport default graphql(LoginQuery)(LoginScreen);\n`;\n\nexport default props =>\n  <MainLayout>\n    <h2>React Native Login</h2>\n    <p>\n      User login and authentication is a primary functionality. Let's see how to\n      create a Login Page and authenticate user.\n    </p>\n\n    <h4>1. Creat a component</h4>\n    <p>\n      To create a login page we need an input components like Input boxes to\n      enter username and password and Button component to submit values and\n      invoke authentication functions.\n    </p>\n    <Block value={inputboxes} />\n\n    <h4>2. Define a login function</h4>\n    <p>\n      Here i am gonna use this.mutate() method to pass arguments to a query and\n      authenticate a user.\n    </p>\n    <p>\n      To use this method we should wrap our component inside database\n      connectivity components.Here i am using the\n      <a href=\"https://github.com/apollographql/react-apollo\">\n        <b> react-apollo </b>\n      </a>\n      package to establish a database connection and a query execution.\n    </p>\n    <Block value={loginquery} />\n\n    <p>\n      This is nothing but getting values from input boxes and do some\n      validations.After validation success hit the database to authenticate user\n      login details.\n    </p>\n    <Block value={loginfunction} />\n\n    <h4>3. Display result</h4>\n    <p>\n      Now we have to enter a phone number and password to login.The\n      Authenticaiton result will be displayed in message text and then we need\n      to navigate if the result is success.\n    </p>\n\n    <CtaButton to=\"/reactnative-intro/\">Previous</CtaButton>\n    <CtaButton to=\"/reactnative-intro/reactnative-signup\">Next</CtaButton>\n  </MainLayout>;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reactnative-intro/reactnative-login.jsx"],"sourceRoot":""}